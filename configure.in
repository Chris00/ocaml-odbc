#  
# autoconf input for Objective Caml programs
# Copyright (C) 2001 Jean-Christophe Filliâtre   
#   from a first script by Georges Mariano 
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# the script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure
#                 or "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     either "byte" if no native compiler was found, 
#                 or "opt" otherwise
#   OCAMLDEP      "ocamldep"
#   OCAMLLEX      "ocamllex"
#   OCAMLYACC     "ocamlyac"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number

# check for one particular file of the sources 
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

AC_INIT(test.ml)

# Check for Ocaml compilers

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we look for the directory of ocamlc in $OCAMLC
COMPOCAMLC=`which $OCAMLC`
OCAMLBIN=`dirname $COMPOCAMLC`

# we extract Ocaml version number and library path
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocaml version is $OCAMLVERSION"
OCAMLLIB=`$OCAMLC -v | tail -1 | cut -f 4 -d " "`
echo "ocaml library path is $OCAMLLIB"

# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
	AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
	AC_MSG_CHECKING(ocamlopt version)
	TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != $OCAMLVERSION ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
	    OCAMLOPT=no
	else
	    AC_MSG_RESULT(ok)
	    OCAMLBEST=opt
	fi
fi

# checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != $OCAMLVERSION ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLC=$OCAMLCDOTOPT
	fi
fi

# checking for ocamlopt.opt
if test "$OCAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVER" != $OCAMLVERSION ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLOPT=$OCAMLOPTDOTOPT
	fi
    fi
fi

# ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
	AC_MSG_ERROR(Cannot find ocamldep.)
fi

AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
	AC_MSG_ERROR(Cannot find ocamllex.)
fi

AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

AC_CHECK_PROG(ODOC,odoc,odoc,no)
if test "$ODOC" = no ; then
	echo Cannot find odoc.
fi


# Check for databases
############ POSTGRES ##################
POSTGRES=yes
POSTGRES_LIBS=
AC_MSG_RESULT(======== configure PostgreSQL ========)
AC_ARG_WITH(pg_incs, [  --with-pg-incs=INCLUDES (-I options to find PostgreSQL ODBC headers)],
    if test "$withval" != "no" ; then  
	POSTGRES_INCS="$withval"
    else
        POSTGRES_INCS=""
    fi)
AC_ARG_WITH(pg_libs, [  --with-pg-libs=DIRS (-L options to find PostgreSQL ODBC libs)],
    if test "$withval" != "no" ; then  
	POSTGRES_LIBDIRS="$withval"
    else
        POSTGRES_LIBDIRS=""
    fi)
OLD_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $POSTGRES_INCS $POSTGRES_LIBDIRS"

AC_CHECK_HEADERS(iodbc.h,,[POSTGRES=no])
AC_CHECK_HEADERS(isql.h,,[POSTGRES=no])
AC_CHECK_HEADERS(isqlext.h,,[POSTGRES=no])
if test "$POSTGRES" = "no"; then
  AC_MSG_RESULT(PostgreSQL ODBC headers not found)
else
  AC_MSG_RESULT(PostgreSQL ODBC headers found)
  dnl Checking for PostgreSQL ODBC lib -lpsqlodbc
  AC_CHECK_LIB(psqlodbc,SQLAllocEnv,POSTGRES_LIBS=-lpsqlodbc)
fi
if test "$POSTGRES_LIBS" = "no"; then
  AC_MSG_RESULT(No PostgreSQL ODBC support)
else
  AC_MSG_RESULT(PostgreSQL ODBC support)
fi

CPP_FLAGS="$OLD_CPPFLAGS"

############ MYSQL ##################
MYSQL=yes
MYSQL_LIBS=no
AC_MSG_RESULT(======== configure MySQL ========)
AC_ARG_WITH(mysql_incs, [  --with-mysql-incs=INCLUDES (-I options to find MySQL ODBC headers)],
    if test "$withval" != "no" ; then  
	MYSQL_INCS="$withval"
    else
        MYSQL_INCS=""
    fi)
AC_ARG_WITH(mysql_libs, [  --with-mysql-libs=DIRS (-L options to find MySQL ODBC libs)],
    if test "$withval" != "no" ; then  
	MYSQL_LIBDIRS="$withval"
    else
        MYSQL_LIBDIRS=""
    fi)
OLD_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $MYSQL_INCS $MYSQL_LIBDIRS"

AC_CHECK_HEADERS(iodbc.h,,[MYSQL=no])
AC_CHECK_HEADERS(isql.h,,[MYSQL=no])
AC_CHECK_HEADERS(isqlext.h,,[MYSQL=no])
if test "$MYSQL" = "no"; then
  AC_MSG_RESULT(MySQL ODBC headers not found)
else
  AC_MSG_RESULT(MySQL ODBC headers found)
  dnl Checking for MySQL ODBC lib -lmyodbc_mysql
  AC_CHECK_LIB(myodbc_mysql,SQLAllocEnv,MYSQL_LIBS=-lmyodbc_mysql)
fi
if test "$MYSQL_LIBS" = "no"; then
  AC_MSG_RESULT(No MySQL ODBC support)
else
  AC_MSG_RESULT(MySQL ODBC support)
fi

CPP_FLAGS="$OLD_CPPFLAGS"

############ UNIXODBC ##################
UNIXODBC=yes
UNIXODBC_LIBS=no
AC_MSG_RESULT(======== configure unixODBC ========)
AC_ARG_WITH(unixodbc_incs, [  --with-unixodbc-incs=INCLUDES (-I options to find unixODBC headers)],
    if test "$withval" != "no" ; then  
	UNIXODBC_INCS="$withval"
    else
        UNIXODBC_INCS=""
    fi)
AC_ARG_WITH(unixodbc_libs, [  --with-unixodbc-libs=DIRS (-L options to find unixODBC libs)],
    if test "$withval" != "no" ; then  
	UNIXODBC_LIBDIRS="$withval"
    else
        UNIXODBC_LIBDIRS=""
    fi)
OLD_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $UNIXODBC_INCS $UNIXODBC_LIBDIRS"

AC_CHECK_HEADERS(odbcinst.h,,[UNIXODBC=no])
AC_CHECK_HEADERS(sql.h,,[UNIXODBC=no])
AC_CHECK_HEADERS(sqlext.h,,[UNIXODBC=no])
if test "$UNIXODBC" = "no"; then
  AC_MSG_RESULT(unixODBC headers not found)
else
  AC_MSG_RESULT(unixODBC headers found)
  dnl Checking for unixODBC lib -lodbc
  AC_CHECK_LIB(odbc,SQLAllocEnv,UNIXODBC_LIBS=-lodbc)
fi
if test "$UNIXODBC_LIBS" = "no"; then
  AC_MSG_RESULT(No unixODBC support)
else
  AC_MSG_RESULT(unixODBC support)
fi

CPP_FLAGS="$OLD_CPPFLAGS"

############ DB2 ##################
DB2=yes
DB2_LIBS=no
AC_MSG_RESULT(======== configure DB2 ========)
AC_ARG_WITH(db2_incs, [  --with-db2-incs=INCLUDES (-I options to find DB2 headers)],
    if test "$withval" != "no" ; then  
	DB2_INCS="$withval"
    else
        DB2_INCS=""
    fi)
AC_ARG_WITH(db2_libs, [  --with-db2-libs=DIRS (-L options to find DB2 libs)],
    if test "$withval" != "no" ; then  
	DB2_LIBDIRS="$withval"
    else
        DB2_LIBDIRS=""
    fi)
OLD_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $DB2_INCS $DB2_LIBDIRS"

AC_CHECK_HEADERS(sqlcli1.h,,[DB2=no])
if test "$DB2" = "no"; then
  AC_MSG_RESULT(DB2 headers not found)
else
  AC_MSG_RESULT(DB2 headers found)
  dnl Checking for DB2 lib -ldb2
  AC_CHECK_LIB(db2,SQLAllocEnv,DB2_LIBS=-ldb2)
fi
if test "$DB2_LIBS" = "no"; then
  AC_MSG_RESULT(No DB2 support)
else
  AC_MSG_RESULT(DB2 support)
fi

CPP_FLAGS="$OLD_CPPFLAGS"

############ OPENINGRES ##################
OPENINGRES=yes
OPENINGRES_LIBS=no
AC_MSG_RESULT(======== configure OPENINGRES ========)
AC_ARG_WITH(db2_incs, [  --with-ingres-incs=INCLUDES (-I options to find OPENINGRES headers)],
    if test "$withval" != "no" ; then  
	OPENINGRES_INCS="$withval"
    else
        OPENINGRES_INCS=""
    fi)
AC_ARG_WITH(db2_libs, [  --with-ingres-libs=DIRS (-L options to find OPENINGRES libs)],
    if test "$withval" != "no" ; then  
	OPENINGRES_LIBDIRS="$withval"
    else
        OPENINGRES_LIBDIRS=""
    fi)
OLD_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $OPENINGRES_INCS $OPENINGRES_LIBDIRS"

AC_CHECK_HEADERS(sqlext.h,,[OPENINGRES=no])
if test "$OPENINGRES" = "no"; then
  AC_MSG_RESULT(OPENINGRES headers not found)
else
  AC_MSG_RESULT(OPENINGRES headers found)
  dnl Checking for OPENINGRES lib -lodbc
  AC_CHECK_LIB(odbc,SQLAllocEnv,OPENINGRES_LIBS=-lodbc)
fi
if test "$OPENINGRES_LIBS" = "no"; then
  AC_MSG_RESULT(No OPENINGRES support)
else
  AC_MSG_RESULT(OPENINGRES support)
fi

CPP_FLAGS="$OLD_CPPFLAGS"



# substitutions to perform
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)
AC_SUBST(ODOC)
AC_SUBST(OCAMLBIN)

AC_SUBST(POSTGRES_INCS)
AC_SUBST(POSTGRES_LIBDIRS)
AC_SUBST(POSTGRES_LIBS)

AC_SUBST(MYSQL_INCS)
AC_SUBST(MYSQL_LIBDIRS)
AC_SUBST(MYSQL_LIBS)

AC_SUBST(UNIXODBC_INCS)
AC_SUBST(UNIXODBC_LIBDIRS)
AC_SUBST(UNIXODBC_LIBS)

AC_SUBST(DB2_INCS)
AC_SUBST(DB2_LIBDIRS)
AC_SUBST(DB2_LIBS)

AC_SUBST(OPENINGRES_INCS)
AC_SUBST(OPENINGRES_LIBDIRS)
AC_SUBST(OPENINGRES_LIBS)

# Finally create the master.Makefile from master.Makefile.in
AC_OUTPUT(master.Makefile)
chmod a-w master.Makefile
